-- aBLAS
-- An Ada 2012 binding to BLAS

generic
package aBLAS.Real_BLAS is

   -- *************
   -- *************
   -- ** Level 1 **
   -- *************
   -- *************

   -- Generate Givens plane rotation c<-cos(theta), s<-sin(theta) which would
   -- turn a vector [a, b] into [r, 0]. On exit a<-r and b is s or 1/c
   procedure rotg(a, b : in out Real; c, s : out Real);

   subtype Modified_Givens_Params is Real_1D_Array(1..5);

   -- Generate a modified Givens rotation including scaling factors sqrt(d1)
   -- and sqrt(d2). On exit, d1 and d2 are the diagonal elements of the
   -- transformation matrix and x1 is the rotated co-ordinate. 'params'
   -- contains the details necessary to apply the rotation
   procedure rotmg(d1, d2 : in out Real;
                   x1 : in out Real;
                   y1 : in Real;
                   params : out Modified_Givens_Params);

   -- Apply a Givens rotation to X and Y where c=cos(theta) and s=sin(theta)
   procedure rot(X : in out Real_Vector'Class;
                 Y : in out Real_Vector'Class;
                 C : in Real;
                 S : in Real);

   -- Apply a modified Givens rotation to X and Y as specified by the "PARAMS"
   -- generated by rotmg
   procedure rotm(X : in out Real_Vector'Class;
                  Y : in out Real_Vector'Class;
                  PARAMS : in out Modified_Givens_Params);

   -- Y <-> X
   procedure swap(X : in out Real_Vector'Class;
                  Y : in out Real_Vector'Class);
   -- X <- aX
   procedure scal(X : in out Real_Vector'Class;
                  A : in Real := 1.0);
   -- Y <- X
   procedure copy(X : in Real_Vector'Class;
                  Y : out Real_Vector'Class);

   -- Y <- aX + Y
   procedure axpy(X : in Real_Vector'Class;
                  Y : in out Real_Vector'Class;
                  A : in Real := 1.0);

   -- dot <- X^T . Y
   function dot(X, Y : in Real_Vector'Class) return Real;

   -- sdsdot <- X^T . Y + B with accumulation done in extended precision
   -- If Real is already double precision, this is the same as using the regular
   -- dot function and adding B
   function sdsdot(X, Y : in Real_Vector'Class;
                   B : in Real := 0.0) return Real;

   -- nrm2 <- sqrt(X^T . X)
   function nrm2(X : in Real_Vector'Class) return Real;

   --  asum <- |X|_1
   function asum(X : in Real_Vector'Class) return Real;

    --  iamax <- 1st k where X_k = MAX(abs(X_k))
   function iamax(X : in Real_Vector'Class) return Integer;

   -- *************
   -- *************
   -- ** Level 2 **
   -- *************
   -- *************

   -- y <- alpha*A*x + beta*y
   procedure gemv(A : in Real_Matrix'Class;
                  X : in Real_Vector'Class;
                  Y : in out Real_Vector'Class;
                  ALPHA : in Real := 1.0;
                  BETA : in Real := 0.0;
                  TRANS : in Real_Trans_Op := No_Transpose)
     with Pre => (X.Length = A.Columns and Y.Length = A.Rows);

   -- gemv <- alpha*A*x
   function gemv(A : in Real_Matrix'Class;
                 X : in Real_Vector'Class;
                 ALPHA : in Real := 1.0;
                 TRANS : in Real_Trans_Op := No_Transpose)
                 return Real_Vector'Class
     with Pre => (X.Length = A.Columns);

   -- A <- alpha*x*yT + A
   procedure ger(X : in Real_Vector'Class;
                 Y : in Real_Vector'Class;
                 A : in out Real_Matrix'Class;
                 ALPHA : in Real := 1.0)
     with Pre => (X.Length = A.Rows and Y.Length = A.Columns);
--
--     -- *************
--     -- *************
--     -- ** Level 3 **
--     -- *************
--     -- *************
--
--     -- C <- alpha*A*B + beta*C
--     procedure gemm(A : in Real_Matrix;
--                    B : in Real_Matrix;
--                    C : in out Real_Matrix;
--                    ALPHA : in Real := 1.0;
--                    BETA : in Real := 0.0;
--                    TRANA : in Real_Trans_Op := No_Transpose;
--                    TRANB : in Real_Trans_Op := No_Transpose;
--                    M, N, K : in Vector_Size := 0;
--                    Convention : in Matrix_Convention := Default_Matrix_Convention)
--       with Inline;
--
--     -- gemm <- alpha*A*B
--     function gemm(A : in Real_Matrix;
--                   B : in Real_Matrix;
--                   ALPHA : in Real := 1.0;
--                   TRANA : in Real_Trans_Op := No_Transpose;
--                   TRANB : in Real_Trans_Op := No_Transpose;
--                   M, N, K : in Vector_Size := 0;
--                   Convention : in Matrix_Convention := Default_Matrix_Convention)
--                   return Real_Matrix
--       with Inline;

end aBLAS.Real_BLAS;
